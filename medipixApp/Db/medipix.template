# medipix.template
# Medipix Area Detector extensions
#
# Giles Knap Feb 2012
#
# Parameters:
#% macro, P,        EPICS name prefix
#% macro, R,        EPICS name suffix
#% macro, PORT,     Asyn port
#% macro, ADDR,     Asyn Address
#% macro, TIMEOUT,  Asyn communications timeout

# This associates the template with an edm screen
# % gui, $(PORT), edmtab, medipixDetector.edl, P=$(P),R=$(R)
##  gdatag, template, Merlin, $(PORT)_medipix, Merlin detector

# We redefine the states for the TriggerMode records defined in ADBase.template
record(mbbo,"$(P)$(R)TriggerMode") {
    field(DESC,"Acquire mode")
    field(ZRVL,"0")
    field(ZRST,"Internal")
    field(ONVL,"1")
    field(ONST,"Trigger Enable")
    field(TWVL,"2")
    field(TWST,"Trigger start rising")
    field(THVL,"3")
    field(THST,"Trigger start falling")
    field(FRVL,"4")
    field(FRST,"Trigger both rising")
    field(FVVL,"5")
    field(FVST,"Software")
}

record(mbbi,"$(P)$(R)TriggerMode_RBV") {
    field(DESC,"Acquire mode")
    field(ZRVL,"0")
    field(ZRST,"Internal")
    field(ONVL,"1")
    field(ONST,"Trigger Enable")
    field(TWVL,"2")
    field(TWST,"Trigger start rising")
    field(THVL,"3")
    field(THST,"Trigger start falling")
    field(FRVL,"4")
    field(FRST,"Trigger both rising ")
    field(FVVL,"5")
    field(FVST,"Software")
}

# We redefine the states for the FileFormat records defined in NDFile.template
record(mbbo, "$(P)$(R)FileFormat")
{
    field(ZRST, "TIFF")
    field(ZRVL, "0")
    field(ONST, "Invalid")
    field(ONVL, "1")
}

record(mbbi, "$(P)$(R)FileFormat_RBV")
{
    field(ZRST, "TIFF")
    field(ZRVL, "0")
    field(ONST, "Invalid")
    field(ONVL, "1")
}


##########################################################################
# Medipix specific fields 
##########################################################################

##########################################################################
# Asyn communication channels
##########################################################################

# asyn record for interactive communication with labview command channel
record(asyn, "$(P)$(R)LabviewAsynCmd")
{
    field(PORT,  "$(PORT)cmd")
    field(IMAX, "64")
    field(OMAX, "64")
}

# asyn record for interactive communication with labview data channel
record(asyn, "$(P)$(R)LabviewAsynData")
{
    field(PORT,  "$(PORT)data")
    field(IMAX, "64")
    field(OMAX, "64")
}

##########################################################################
# Threshold settings and threshold scan control
##########################################################################

# Threshold 0 energy
# % autosave 2 
##  gdatag, pv, rw, $(PORT)_medipix, ThresholdEnergy0, Set ThresholdEnergy
record(ao, "$(P)$(R)ThresholdEnergy0")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))THRESHOLD0")
    field(DESC, "Energy threshold 0")
    field(EGU,  "keV")
    field(PREC, "3")
    field(VAL, "10.000")
}

##  gdatag, pv, ro, $(PORT)_medipix, ThresholdEnergy0_RBV, Readback for ThresholdEnergy
record(ai, "$(P)$(R)ThresholdEnergy0_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))THRESHOLD0")
    field(DESC, "Energy threshold 0")
    field(EGU,  "keV")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
} 

# Threshold 1 energy
# % autosave 2 
##  gdatag, pv, rw, $(PORT)_medipix, ThresholdEnergy1, Set ThresholdEnergy
record(ao, "$(P)$(R)ThresholdEnergy1")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))THRESHOLD1")
    field(DESC, "Energy threshold 1")
    field(EGU,  "keV")
    field(PREC, "3")
    field(VAL, "10.000")
}

##  gdatag, pv, ro, $(PORT)_medipix, ThresholdEnergy1_RBV, Readback for ThresholdEnergy
record(ai, "$(P)$(R)ThresholdEnergy1_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))THRESHOLD1")
    field(DESC, "Energy threshold 1")
    field(EGU,  "keV")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

# Operating energy
# % autosave 2 
##  gdatag, pv, rw, $(PORT)_medipix, OperatingEnergy, Set OperatingEnergy
record(ao, "$(P)$(R)OperatingEnergy")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))OPERATINGENERGY")
    field(DESC, "Operating Energy")
    field(EGU,  "keV")
    field(PREC, "3")
    field(VAL, "20.000")
}

##  gdatag, pv, ro, $(PORT)_medipix, OperatingEnergy_RBV, Readback for OperatingEnergy
record(ai, "$(P)$(R)OperatingEnergy_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))OPERATINGENERGY")
    field(DESC, "Operating Energy")
    field(EGU,  "keV")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}


# Threshold Scan Start Energy
# % autosave 2 
##  gdatag, pv, rw, $(PORT)_medipix, StartThresholdScan, Set Threshold Scan Start Energy
record(ao, "$(P)$(R)StartThresholdScan")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))THRESHOLDSTART")
    field(DESC, "Threshold Start Energy")
    field(EGU,  "keV")
    field(PREC, "3")
    field(VAL, "2.000")
}

##  gdatag, pv, ro, $(PORT)_medipix, StartThresholdScan_RBV, Readback for Threshold Scan Start Energy
record(ai, "$(P)$(R)StartThresholdScan_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))THRESHOLDSTART")
    field(DESC, "Threshold Start Energy")
    field(EGU,  "keV")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

# Threshold Scan Stop Energy
# % autosave 2 
##  gdatag, pv, rw, $(PORT)_medipix, StopThresholdScan, Set Threshold Scan Stop Energy
record(ao, "$(P)$(R)StopThresholdScan")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))THRESHOLDSTOP")
    field(DESC, "Threshold Stop Energy")
    field(EGU,  "keV")
    field(PREC, "3")
    field(VAL, "18.000")
}

##  gdatag, pv, ro, $(PORT)_medipix, StopThresholdScan_RBV, Readback for Threshold Scan Stop Energy
record(ai, "$(P)$(R)StopThresholdScan_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))THRESHOLDSTOP")
    field(DESC, "Threshold Stop Energy")
    field(EGU,  "keV")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

# Threshold Scan Step Energy
# % autosave 2 
##  gdatag, pv, rw, $(PORT)_medipix, StepThresholdScan, Set Threshold Scan Step Energy
record(ao, "$(P)$(R)StepThresholdScan")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))THRESHOLDSTEP")
    field(DESC, "Threshold Step Energy")
    field(EGU,  "keV")
    field(PREC, "3")
    field(VAL, "1.000")
}

##  gdatag, pv, ro, $(PORT)_medipix, StepThresholdScan_RBV, Readback for Threshold Scan Step Energy
record(ai, "$(P)$(R)StepThresholdScan_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))THRESHOLDSTEP")
    field(DESC, "Threshold Step Energy")
    field(EGU,  "keV")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

# execute Threshold Scan 
##  gdatag, pv, rw, $(PORT)_medipix, ThresholdScan, Set ThresholdScan
record(longout, "$(P)$(R)ThresholdScan") {
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT, "@asyn($(PORT),$(ADDR),$(TIMEOUT))THRESHOLDSCAN")
   field(DESC, "ThresholdScan")
   field(VAL, "0")
}

##  gdatag, pv, ro, $(PORT)_medipix, ThresholdScan_RBV, Readback for ThresholdScan
record(longin, "$(P)$(R)ThresholdScan_RBV") {
   field(DTYP, "asynInt32")
   field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))THRESHOLDSCAN")
   field(DESC, "ThresholdScan")
   field(SCAN, "I/O Intr")
}

###################################################################
#  threshold scan start and stop 
###################################################################
##  gdatag, pv, rw, $(PORT)_ADBase, StartThresholdScanning, Set StartThresholdScanning
record(busy, "$(P)$(R)StartThresholdScanning") {
   field(DTYP, "asynInt32")
   field(OUT, "@asyn($(PORT),$(ADDR),$(TIMEOUT))STARTTHRESHOLDSCANNING")
   field(ZNAM, "Done")
   field(ONAM, "StartThresholdScanning")
   field(VAL,  "0")
}

# This makes the component icon reflect the status
# % gui, $(PORT), status
##  gdatag, binary, ro, $(PORT)_ADBase, StartThresholdScanning_RBV, Readback for StartThresholdScanning
record(bi, "$(P)$(R)StartThresholdScanning_RBV") {
   field(DTYP, "asynInt32")
   field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))STARTTHRESHOLDSCANNING")
   field(ZNAM, "Done")
   field(ZSV,  "NO_ALARM")
   field(ONAM, "Scanning")
   field(OSV,  "MINOR")
   field(SCAN, "I/O Intr")
}


###################################################################
#  software Trigger
###################################################################
##  gdatag, pv, rw, $(PORT)_ADBase, SoftwareTrigger, Set SoftwareTrigger
record(busy, "$(P)$(R)SoftwareTrigger") {
   field(DTYP, "asynInt32")
   field(OUT, "@asyn($(PORT),$(ADDR),$(TIMEOUT))SOFTWARETRIGGER")
   field(ZNAM, "Waiting")
   field(ONAM, "Triggered")
   field(VAL,  "0")
}

# This makes the component icon reflect the status
# % gui, $(PORT), status
##  gdatag, binary, ro, $(PORT)_ADBase, SoftwareTrigger_RBV, Readback for SoftwareTrigger
record(bi, "$(P)$(R)SoftwareTrigger_RBV") {
   field(DTYP, "asynInt32")
   field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))SOFTWARETRIGGER")
   field(ZNAM, "Done")
   field(ZSV,  "NO_ALARM")
   field(ONAM, "Scanning")
   field(OSV,  "MINOR")
   field(SCAN, "I/O Intr")
}


##########################################################################
# Further Medipix specific records
##########################################################################

# implements the reset button to restart the labview server
record(busy, "$(P)$(R)Reset") {
   field(DTYP, "asynInt32")
   field(OUT, "@asyn($(PORT),$(ADDR),$(TIMEOUT))RESET")
   field(ZNAM, "Done")
   field(ONAM, "Reset")
   field(VAL,  "0")
}

record(bi, "$(P)$(R)Reset_RBV") {
   field(DTYP, "asynInt32")
   field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))RESET")
   field(ZNAM, "Done")
   field(ZSV,  "NO_ALARM")
   field(ONAM, "Scanning")
   field(OSV,  "MINOR")
   field(SCAN, "I/O Intr")
}

# Counter depth - number of bits per pixel
# % autosave 2 
##  gdatag, pv, rw, $(PORT)_medipix, CounterDepth, Set CounterDepth
record(mbbo,"$(P)$(R)CounterDepth") {
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))COUNTERDEPTH")
    field(DESC,"Image depth")
    field(ZRVL,"12")
    field(ZRST,"12 bit")
    field(ONVL,"24")
    field(ONST,"24 bit")
}

##  gdatag, pv, ro, $(PORT)_medipix, CounterDepth_RBV, Read CounterDepth
record(mbbi,"$(P)$(R)CounterDepth_RBV") {
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))COUNTERDEPTH")
    field(DESC,"Image depth")
    field(ZRVL,"12")
    field(ZRST,"12 bit")
    field(ONVL,"24")
    field(ONST,"24 bit")
   field(SCAN, "I/O Intr")
}

############### TODO ##############################################################

# Counter depth - number of bits per pixel
# % autosave 2 
##  gdatag, pv, rw, $(PORT)_medipix, CounterDepth, Set CounterDepth
record(bo,"$(P)$(R)EnableCounter1") {
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))ENABLECOUNTER1")
    field(DESC,"Enable Counter 1")
    field(ZNAM,"Disabled")
    field(ONAM,"Enabled")
}

##  gdatag, pv, ro, $(PORT)_medipix, CounterDepth_RBV, Read CounterDepth
record(bi,"$(P)$(R)EnableCounter1_RBV") {
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))ENABLECOUNTER1")
    field(DESC,"Enable Counter 1")
    field(ZNAM,"Disabled")
    field(ONAM,"Enabled")
    field(SCAN, "I/O Intr")
}

# Counter depth - number of bits per pixel
# % autosave 2 
##  gdatag, pv, rw, $(PORT)_medipix, CounterDepth, Set CounterDepth
record(bo,"$(P)$(R)ContinuousRW") {
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))CONTINUOUSRW")
    field(DESC,"Enable Continuous Read/Write")
    field(ZNAM,"Disabled")
    field(ONAM,"Enabled")
}

##  gdatag, pv, ro, $(PORT)_medipix, CounterDepth_RBV, Read CounterDepth
record(bi,"$(P)$(R)ContinuousRW_RBV") {
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))CONTINUOUSRW")
    field(DESC,"Enable Continuous Read/Write")
    field(ZNAM,"Disabled")
    field(ONAM,"Enabled")
    field(SCAN, "I/O Intr")
}

############### END OF TODO ##############################################################

##########################################################################
# Disable records from ADBase etc. that we do not use for medipix
##########################################################################


record(mbbo, "$(P)$(R)DataType")
{
    field(DISA, "1")
}
record(mbbi, "$(P)$(R)DataType_RBV")
{
    field(DISA, "1")
}
record(mbbo, "$(P)$(R)ColorMode")
{
    field(DISA, "1")
}
record(mbbi, "$(P)$(R)ColorMode_RBV")
{
    field(DISA, "1")
}
record(longout, "$(P)$(R)BinX")
{
    field(DISA, "1")
}
record(longin, "$(P)$(R)BinX_RBV")
{
    field(DISA, "1")
}
record(longout, "$(P)$(R)BinY")
{
    field(DISA, "1")
}
record(longin, "$(P)$(R)BinY_RBV")
{
    field(DISA, "1")
}
record(longout, "$(P)$(R)MinX")
{
    field(DISA, "1")
}
record(longin, "$(P)$(R)MinX_RBV")
{
    field(DISA, "1")
}
record(longout, "$(P)$(R)MinY")
{
    field(DISA, "1")
}
record(longin, "$(P)$(R)MinY_RBV")
{
    field(DISA, "1")
}
record(longout, "$(P)$(R)SizeX")
{
    field(DISA, "1")
}
record(longin, "$(P)$(R)SizeX_RBV")
{
    field(DISA, "1")
}
record(longout, "$(P)$(R)SizeY")
{
    field(DISA, "1")
}
record(longin, "$(P)$(R)SizeY_RBV")
{
    field(DISA, "1")
}
record(bo, "$(P)$(R)ReverseX")
{
    field(DISA, "1")
}
record(bi, "$(P)$(R)ReverseX_RBV")
{
    field(DISA, "1")
}
record(bo, "$(P)$(R)ReverseY")
{
    field(DISA, "1")
}
record(bi, "$(P)$(R)ReverseY_RBV")
{
    field(DISA, "1")
}